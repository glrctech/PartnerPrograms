'CR3000 Series Datalogger

'Copyright (c) 2002, 2006 Campbell Scientific, Inc. All rights reserved.

'2 October 06
'version 2.2


' This datalogger program measures turbulence sensors at 10 or 20 Hz. The time series
'can be saved to a card. The datalogger will also compute online turbulent fluxes
'from the measured data. The flux table saves all the cross products that are
'required to rotate the online fluxes into natural wind coordinates in post
'processing as described in Kaimal and Finnigan (1994), and Tanner and Thurtell (1969).

'This program was modified by Ramond Berard, Campbell Scientific (Canada) Corp.) on March 11/08
'to include the RMYoung 05106 wind monitor and the IRR-P infrared temperature sensor. The data outputs
'for those two sensors were added to DataTable flux.

'Revised on 05/07/09 by Raymond Berard, Campbell Scientific (Canada) Corp.). Added the KH20 to the
'sensor suite. The intent is to provide cack-up latent heat fllux when power is too low for the LI7500. Also 
'included battery volt measurements for two additoinal external batteries (3 batteries in all).

'Swapped LI7500 July 2009,KH20 JUne 2010 

'The following sensors are measured:
'
'CSAT3		three dimensional sonic anemometer s/n 1542 25'
'LI-7500		open path infrared gas analyzer (CO2 and H2O) old s/n 1435, July 2009 s/n_______15'
'KH20		open path krypton hygrometer (H2O)was 1229, June 2010 s/n 1228 25'
'HMP45C x2		temperature/relative humidity s/n #1c3048 40' #2c1591 15'
'05106-10	R.M.Young wind monitor s/n c05106-10 15' plus 25'
'IRR-P			Infreared temperature sensor s/n 1559 15'
'SPLite         pyranometer s/n 011004 25'
'CGR4          pyrgeometer s/n 070074 25'


' The sign convention for the fluxes is positive away from the surface and negative
'towards the surface.
'
' The datalogger will introduce lags into the CSAT3, LI-7500, and datalogger Panel
'Temperature data so that all measurements are aligned in time. The lags are a
'function of the Scan Interval and are computed automatically by the program.
'
' The site attendant must load in several constants and calibration values. Search
'for the text string "unique" to find the locations where unique constants and
'calibration values are entered.


'*** Unit Definitions ***

'Units	Units
'C		Celsius
'degrees	degrees (angle)
'g		grams
'J		Joules
'kg		kilograms
'kPa		kilopascals
'm		meters
'mg		milligrams
'mmol	millimoles
'mol		moles
's		seconds
'umol	micromols
'V		volts
'W		Watts


'*** Wiring ***

'SDM INPUT
'SDM-C1	CSAT3 SDM Data (green)
'		LI-7500 SDM Data (gray)
'SDM-C2	CSAT3 SDM Clock (white)
'		LI-7500 SDM Clock (blue)
'SDM-C3	CSAT3 SDM Enable (brown)
'		LI-7500 SDM Enable (brown)
'G		CSAT3 SDM reference (black)
'		CSAT3 SDM shield (clear)
'		LI-7500 SDM reference (black)
'		LI-7500 SDM shield (white)


'ANALOG INPUT
'1H		R.M.Young wind direction signal (Green)
'1L		IRR-P sensor body temperatue signal (Green)
'gnd	R.MYoung wind direction reference (Black)

'2H		IRR-P target temeperature thermopile Hi signal (Red)
'2L		IRR-P target temeperature thermopile Lo signal (Black)
'gnd	IRR-P Analog ground (Clear) + SBT reference (Blue)

'3H		CGR4 radiation sensor signal (red) 
'3L		CGR4 radiation sensor signal reference (blue) 
'gnd	CGR4 radiation sensor shield (black) Jumper to 3L (green)

'4H		SP LITE radiation sensor signal (white)
'4L		SP LITE radiation sensor signal reference (green)
'gnd	Jumper to 4L (green)

'5H		HMP45C temperature signal (yellow)
'5L		HMP45C signal reference (purple)
'gnd		HMP45C shield (clear)

'6H		HMP45C relative humidity signal (blue)
'6L		short jumper wire to 5L (green)

'7H		HMP45C_2 temperature signal (yellow)
'7L		HMP45C _2 signal reference (purple)
'gnd		HMP45C shield (clear)

'8H		HMP45C _2 relative humidity signal (blue)
'8L		short jumper wire to 7L (green)

'9H		CSAT3 battery voltage (+red) 
'9L          CGR4 thermistor (yellow) 1k resistor between 9L and sig. ground (purple)
'gnd	    CSAT3 battery reference (-black) 1k resistor (purple)

'10H		VDIV10.1 H - LICOR battery voltage (+red) 
'10L		
'gnd		LICOR battery reference (-black) 

'11H		KH20 signal (white)
'11L		KH20 signal reference (black)
'gnd		KH20 shield (clear)

'EXCITATION  PORTS

'Vx1	RMYoung wind direction excitation (White)
'Vx2	IRR-P sensor body temperature excitation (White)
'Vx3   CGR4 thermistor (green)

'PULSE INPUT PORTS

'P1	RMYoung wind speed signal (Red)
'gnd	RMYoung wind speed reference (Blue) & Shield (Clear)
'P2      Tipping bucket (black)
'gnd    Tipping bucket (white and clear) 

'CONTROL PORTS

'C1		SPECTRA920 radio on and off (yellow)

'POWER OUT
'5V	HMP45C power control x2 (orange)
'12V	HMP45C power x2 (red)
'G		HMP45C power reference x2 (black)


'POWER IN
'12V		datalogger (red)
'G		datalogger (black)


'EXTERNAL POWER SUPPLY
'POS		CSAT3 power (red)
'		LI-7500 power (red with white)
'		CR3000 datalogger (red)
'          SPECTRA920 radio (red)
'NEG		CSAT3 power reference (black)
'		CSAT3 power shield (clear)
'		SPECTRA920 radio (black)
'		LI-7500 ground (green)
'		CR3000 datalogger (black)


PipeLineMode


'*** Constants ***

'Measurement Rate				'10 Hz		20 Hz
Const SCAN_INTERVAL = 100		'100 mSec		50 mSec

'Output period
Const OUTPUT_INTERVAL = 30		'Online flux data output interval in minutes.
Const NUM_DAY_CPU = 7			'Number of days of data to store on the CPU.
Const XKW = -0.209				'Unique path length times absorption coefficent for water vapor [m^3 / g].
Const X = 1.407				'Unique path length of the KH20 [cm]. scaled values s/n 1228
Const KW = -0.148				'Unique absorption coefficent for water vapor [m^3 / (g cm)].
Const CSAT3_AZIMUTH = -98			'Unique value.
'Compass azimuth of the -x axis. For the figure
' below, CSAT3_AZIMUTH = 90.
' () -> Compass coordinate system
' {} -> Right handed coordinate system
'
'
'                               (N)
'                               {-y}
'                                |
'                                |
'                                |
'                                |
'                                |
'              (W) {+x} <-------[ ]----X--- {-x} (E)
'                              / |      \
'                    CSAT3 Block |      CSAT3 Transducers
'                                |
'                                |
'                                v
'                               {+y}
'                               (S)
'
'The program computes the compass wind direction, using the constant
' CSAT3_AZIMUTH, and a CSAT3 wind direction. Good CSAT3 wind directions
' are between -90 to 0 and 0 to 90 degrees, e.g. the wind is blowing into
' the CSAT3 sensor head.


Const OFFSET = 16						'An offset delay that will be introduced to the CSAT3 and LI-7500 data.
Const DELAY_CSAT = 2					'Fixed inherent lag of the CSAT3 data (two scans).
Const DELAY_IRGA = INT (300/SCAN_INTERVAL)	'Fixed inherent lag of the LI-7500 data (three scans at 10 Hz or six scans at 20 Hz).

'Determine scan buffer size, CSAT3 Execution Parameters and fixed lags for CSAT3 and LI-7500.
Const SCAN_BUFFER_SIZE = 60*INT (1000/SCAN_INTERVAL)	'Compute a 60 second scan buffer.
Const CSAT_OPT = INT (1000/SCAN_INTERVAL)			'Compute CSAT3 Execution Parameter (10 or 20 Hz).
Const CSAT_REC_BCK = OFFSET-DELAY_CSAT				'Number of records back to align CSAT3 data.
Const IRGA_REC_BCK = OFFSET-DELAY_IRGA				'Number of records back to align LI-7500 data.

'Compute CPU and card storage size for the FLUX DataTables.
Const FLUX_SIZE_CPU = (NUM_DAY_CPU*1440)/OUTPUT_INTERVAL'Size of flux DataTable on CPU [days].

Const CP = 1004.67				'Estimate of heat capacity of air [J/(kg K)].
Const LV = 2440				'Estimate of the latent heat of vaporization [J/g].
Const SDM_PER = 30				'Default SDM clock speed.
Const MU_WPL = 29/18			'Ratio of the molecular weight of dry air to that of water vapor.
Const R = 8.3143e-3				'Universal gas constant [kPa m^3/(K mol) ].
Const RD = R/29				'Gas constant for dry air [kPa m^3/(K g)].
Const RV = R/18				'Gas constant for water vapor [kPa m^3/(K g)].
Const CO = 0.2095				'Fraction concentration of oxygen in the atmosphere.
Const MO = 32					'Molecular weight of oxygen [g / mol].
Const KO = 0.0045				'Absorbtion coefficent for oxygen [m^3 / (g cm)].

'Declare constants for the IRR-P sensor. Each sensor has unique C0, C1, and C2 values. 
'Refer to the calibration sheet shipped with your sensor to obtain the correct values for your sensor.
Const mC2=78995.0		'Unique value
Const mC1=8891210		'Unique value
Const mC0=1403420000		'Unique value
Const bC2=23521.7		'Unique value
Const bC1=-678371		'Unique value
Const bC0=-512190		'Unique value

'Declare constants for meteorological sensors.
Const SPLITE_cal=12.5
Const CGR4_cal=9.90
'Declare constants CGR4
Const CGR4_A = 1.03E-3
Const CGR4_B = 2.39E-4
Const CGR4_C = 1.57E-7
Const CGR4_T = 5.67E-8

'Declare the source values for the WriteIO instruction to turn radio on & off
Const radio_off=0
Const radio_on =1

'*** Variables ***

'Online lagged CSAT3, KH20 and LI-7500 data.
Public aligned_data(11)
Alias aligned_data(1) = panel_temp
Alias aligned_data(2) = Ux
Alias aligned_data(3) = Uy
Alias aligned_data(4) = Uz
Alias aligned_data(5) = Ts
Alias aligned_data(6) = diag_csat
Alias aligned_data(7) = co2
Alias aligned_data(8) = h2o
Alias aligned_data(9) = press
Alias aligned_data(10) = diag_irga
Alias aligned_data(11) = ln_kh
Units panel_temp = C
Units Ux = m/s
Units Uy = m/s
Units Uz = m/s
Units Ts = C
Units diag_csat = unitless
Units co2 = mg/m^3
Units h2o = g/m^3
Units press = kPa
Units diag_irga = unitless
Units ln_kh = ln_mV

Public co2_um_m
Public h2o_mm_m
Units co2_um_m = umol/mol
Units h2o_mm_m = mmol/mol


Public diag_bits(8) AS Boolean	'Warning flags.
Alias diag_bits(1) = del_T_f		'Delta temperature warning flag.
Alias diag_bits(2) = sig_lck_f	'Poor signal lock warning flag.
Alias diag_bits(3) = amp_h_f		'Amplitude high warning flag.
Alias diag_bits(4) = amp_l_f		'Amplitude low warning flag.
Alias diag_bits(5) = chopper_f	'Chopper warning flag.
Alias diag_bits(6) = detector_f	'Detector warning flag.
Alias diag_bits(7) = pll_f		'PLL warning flag.
Alias diag_bits(8) = sync_f		'Synchronization warning flag.
Units diag_bits = samples
Public agc AS Long				'Automatic gain control.
Units agc = unitless


'No delay meteorological variables.
Public hmp(2)			'HMP45C temperature and relative humidity.
Public hmp2(2)				'HMP45C _2 temperature and relative humidity.
Public e_hmp				'HMP45C vapor pressure.
Public e_hmp2			'HMP45C _2 vapor pressure.
Dim h2o_hmp_mean			'Mean HMP45C vapor density.
Dim rho_a_mean				'Mean air density.
Public RMY_WS                 'Wind speed measured by RMYoung.
Public RMY_WD				'Wind direction measuredby RMYoung
Public Rs					'SP-LITE  shortwave radiation 
Public Rtp					'CGR4 thermopile
Public CGR4Temp       'CGR4 body temp
Public Rl                    'CGR4 longwave radiation
Dim Rsensor             'CGR4 PT100 thermistor
Public TB                     'tipping bucket rain gauge'
Public batt_CR3000		'CR3000 battery voltage.
Public batt_CSAT		'CSAT External battery voltage
Public batt_LICOR		'Licor External battery voltage
Alias hmp(1) = t_hmp
Alias hmp(2) = rh_hmp
Alias hmp2(1) = t_hmp2
Alias hmp2(2) = rh_hmp2
Units t_hmp2 = C
Units rh_hmp2 = percent
Units e_hmp2 = kPa
Units h2o_hmp_mean = g/m^3
Units rho_a_mean = kg/m^3
Units RMY_WS = m/s
Units RMY_WD = degrees
Units Rs=W/m^2
Units Rtp=W/m^2
Units Rsensor=ohms
Units CGR4Temp = degC
Units Rl = W/m2
Units TB=mm
Units batt_CR3000 = V
Units batt_CSAT=V
Units batt_LICOR=V

'IRR-P sensor variables
Public mV_IRR
Public SBT_C
Public SBT_K
Public m
Public b
Public TT_C
Units mV_IRR=mV
Units SBT_C=C
Units SBT_K=K
Units TT_C=C

'Flux variables.
Dim Fc_wpl				'Carbon dioxide flux (LI-7500), with Webb et al. term.
Dim LE_wpl				'Latent heat flux (LI-7500), with Webb et al. term.
Dim LE_wpl_kh				'Latent heat flux (KH20), with oxygen correction and Webb et al. term.
Dim Hs					'Sensible heat flux using sonic temperature.
Dim Hc					'Sensible heat flux computed from Hs and LE_wpl.
Dim tau					'Momentum flux.
Dim u_star				'Friction velocity.
Dim Fc_irga				'Carbon dioxide flux (LI-7500), without Webb et al. term.
Dim LE_irga				'Latent heat flux (LI-7500), without Webb et al. term.
Dim LE_kh					'Latent heat flux from KH20.
Dim co2_wpl_LE				'Carbon dioxide flux (LI-7500), Webb et al. term due to latent heat flux.
Dim co2_wpl_H				'Carbon dioxide flux (LI-7500), Webb et al. term due to sensible heat flux.
Dim h2o_wpl_LE				'Latent heat flux (LI-7500), Webb et al. term due to latent heat flux.
Dim h2o_wpl_H				'Latent heat flux (LI-7500), Webb et al. term due to sensible heat flux.
Dim oc_LE					'Oxygen correction to the KH20 Latent heat flux.
Dim oc_var				'Oxygen correction to the KH20 variance.
Dim h2o_wpl_LE_kh			'Latent heat flux (KH20), Webb et al. term due to latent heat flux.
Dim h2o_wpl_H_kh			'Latent heat flux (KH20), Webb et al. term due to sensible heat flux.
Dim cov_out(36)			'Covariances of scalars and wind, wind vector, t_hmp_mean, e_mean, co2_mean, press_mean, and Ts_mean.
Units Fc_wpl = mg/(m^2 s)
Units LE_wpl = W/m^2
Units LE_wpl_kh = W/m^2
Units Hs = W/m^2
Units Hc = W/m^2
Units tau = kg/(m s^2)
Units u_star = m/s
Units Fc_irga = mg/(m^2 s)
Units LE_irga = W/m^2
Units co2_wpl_LE = mg/(m^2 s)
Units co2_wpl_H = mg/(m^2 s)
Units h2o_wpl_LE = W/m^2
Units h2o_wpl_H = W/m^2
Units oc_LE = W/m^2
Units oc_var = (g/m^3)^2
Units h2o_wpl_LE_kh = W/m^2
Units h2o_wpl_H_kh = W/m^2

'Aliases for covariances.
Alias cov_out(1) = stdev_Ts
Alias cov_out(2) = cov_Ts_Ux
Alias cov_out(3) = cov_Ts_Uy
Alias cov_out(4) = cov_Ts_Uz
Alias cov_out(5) = stdev_Ux
Alias cov_out(6) = cov_Ux_Uy
Alias cov_out(7) = cov_Ux_Uz
Alias cov_out(8) = stdev_Uy
Alias cov_out(9) = cov_Uy_Uz
Alias cov_out(10) = stdev_Uz
Alias cov_out(11) = stdev_co2
Alias cov_out(12) = cov_co2_Ux
Alias cov_out(13) = cov_co2_Uy
Alias cov_out(14) = cov_co2_Uz
Alias cov_out(15) = stdev_h2o
Alias cov_out(16) = cov_h2o_Ux
Alias cov_out(17) = cov_h2o_Uy
Alias cov_out(18) = cov_h2o_Uz
Alias cov_out(19) = stdev_h2o_kh
Alias cov_out(20) = cov_h2o_kh_Ux
Alias cov_out(21) = cov_h2o_kh_Uy
Alias cov_out(22) = cov_h2o_kh_Uz
Alias cov_out(23) = cov_h2o_kh_Ts
Units stdev_Ts = C
Units cov_Ts_Ux = m C/s
Units cov_Ts_Uy = m C/s
Units cov_Ts_Uz = m C/s
Units stdev_Ux = m/s
Units cov_Ux_Uy = (m/s)^2
Units cov_Ux_Uz = (m/s)^2
Units stdev_Uy = m/s
Units cov_Uy_Uz = (m/s)^2
Units stdev_Uz = m/s
Units stdev_co2 = mg/m^3
Units cov_co2_Ux = mg/(m^2 s)
Units cov_co2_Uy = mg/(m^2 s)
Units cov_co2_Uz = mg/(m^2 s)
Units stdev_h2o = g/m^3
Units cov_h2o_Ux = g/(m^2 s)
Units cov_h2o_Uy = g/(m^2 s)
Units cov_h2o_Uz = g/(m^2 s)
Units stdev_h2o_kh = g/m^3
Units cov_h2o_kh_Ux = g/(m^2 s)
Units cov_h2o_kh_Uy = g/(m^2 s)
Units cov_h2o_kh_Uz = g/(m^2 s)
Units cov_h2o_kh_Ts = g C/m^3

'Wind directions and speed.
'Alias cov_out(24) = wnd_spd - in compass coordinate system, same as CSAT3.
'Alias cov_out(25) = rslt_wnd_spd - in compass coordinate system, same as CSAT3.
Alias cov_out(26) = wnd_dir_compass
'Alias cov_out(27) = std_wnd_dir - in compass coordinate system, same as CSAT3.
Alias cov_out(28) = wnd_spd
Alias cov_out(29) = rslt_wnd_spd
Alias cov_out(30) = wnd_dir_csat3
Alias cov_out(31) = std_wnd_dir
Alias cov_out(32) = t_hmp_mean
Alias cov_out(33) = e_hmp_mean
Alias cov_out(34) = co2_mean
Alias cov_out(35) = press_mean
Alias cov_out(36) = Ts_mean
Units wnd_dir_compass = degrees
Units wnd_spd = m/s
Units rslt_wnd_spd = m/s
Units wnd_dir_csat3 = degrees
Units std_wnd_dir = degrees
Units t_hmp_mean = C
Units co2_mean = mg/m^3
Units press_mean = kPa
Units Ts_mean = C

'Diagnostic variables.
Dim disable_flag_on(4) AS Boolean	'Intermediate processing disable flags.
'disable_flag_on(1)				'TRUE when CSAT3 diagnostic warning flags are on or CSAT3 has no data.
'disable_flag_on(2)				'TRUE when LI-7500 diagnostic warning flags are on or LI-7500 failed to send data.
'disable_flag_on(3)				'TRUE when CSAT3 diagnostic warning flags are on.
'                  				  Used to filter the sum of CSAT3 diagnostic warning flags.
'disable_flag_on(4)				'TRUE when LI-7500 diagnostic warning flags are on.
'                  				  Used to filter the sum of LI-7500 diagnostic warning flags.
Dim cov_disable_flag AS Boolean	'TRUE when CSAT3 or LI-7500 reports bad data.
Dim n						'Number of samples in the online covariances.
Units n = samples


'No delay CSAT3 data.
Dim wind_raw(5)
Alias wind_raw(1) = Ux_raw
Alias wind_raw(2) = Uy_raw
Alias wind_raw(3) = Uz_raw
Alias wind_raw(4) = Ts_raw
Alias wind_raw(5) = diag_csat_raw
Units wind_raw = m/s
Units Ts_raw = C
Units diag_csat_raw = unitless

'No delay LI-7500 data.
Dim irga_raw(4)
Alias irga_raw(1) = co2_raw
Alias irga_raw(2) = h2o_raw
Alias irga_raw(3) = press_raw
Alias irga_raw(4) = diag_irga_raw
Units co2_raw = umol/m^3
Units h2o_raw = mmol/m^3
Units press_raw = kPa
Units diag_irga_raw = unitless

'No delay analog measurements.
Dim kh_raw
Dim panel_temp_raw
Units kh_raw = mV
Units panel_temp_raw = C


'Working variables.
Dim cov_array(4,5)				'Arrays used to hold the input data for the covariance instructions.
Dim co2_mm_m3					'Carbon dioxide concentration [mmol/m^3], used to compute umol/mol concentration.
Dim h2o_mm_m3					'Water vapor concentration [mmol/m^3], used to compute vapor pressure and mmol/mol concentration.
Dim sigma_wpl					'Webb et al. sigma = density of water vapor / density of dry air.
Dim j						'Generic counter variable.
Dim scan_count AS Long			'Number scans executed.
Dim wind_east					'East wind in compass coordinate system.
Dim wind_north					'North wind in compass coordinate system.
Dim save_ts_flag_on AS Boolean	'Used to synchronize the time series output to the even minute.
Dim dly_data_out(11)			'Variable used to temporarily store the lagged record.
Dim rho_d_mean					'Density of dry air used in Webb et al. term [kg / m^3].
Dim diag_csat_work AS Long		'Working variable used to break out the CSAT3 diagnostic bits.
Dim diag_irga_work AS Long		'Working variable used to break out the LI-7500 diagnostic bits.
Dim e_sat						'Saturation vapor pressure.
Dim kh						'Delayed KH20 signal.
Units kh = mV



'*** Final Output Data Tables ***

'Online flux data.
DataTable (flux,TRUE,FLUX_SIZE_CPU)
	DataInterval (0,OUTPUT_INTERVAL,Min,10)
	CardOut (0,-1)

	Sample (1,Hs,IEEE4)
	Sample (1,Fc_wpl,IEEE4)
	Sample (1,LE_wpl,IEEE4)
	Sample (1,Hc,IEEE4)
	Sample (1,LE_wpl_kh,IEEE4)
	Sample (1,tau,IEEE4)
	Sample (1,u_star,IEEE4)

	Sample (1,Ts_mean,IEEE4)
	Sample (4,stdev_Ts,IEEE4)

	Sample (1,co2_mean,IEEE4)
	Sample (4,stdev_co2,IEEE4)
	Average (1,h2o,IEEE4,disable_flag_on(2))
	Sample (4,stdev_h2o,IEEE4)

	Average (1,kh,IEEE4,FALSE)
	Sample (5,stdev_h2o_kh,IEEE4)

	Average (1,Ux,IEEE4,disable_flag_on(1))
	Sample (3,stdev_Ux,IEEE4)
	Average (1,Uy,IEEE4,disable_flag_on(1))
	Sample (2,stdev_Uy,IEEE4)
	Average (1,Uz,IEEE4,disable_flag_on(1))
	Sample (1,stdev_Uz,IEEE4)

	Sample (1,press_mean,IEEE4)
	Sample (1,t_hmp_mean,IEEE4)
	Sample (1,e_hmp_mean,IEEE4)
	Sample (1,h2o_hmp_mean,IEEE4)
	Sample (1,rho_a_mean,IEEE4)

	Sample (1,wnd_dir_compass,IEEE4)
	Sample (1,wnd_dir_csat3,IEEE4)
	Sample (1,wnd_spd,IEEE4)
	Sample (1,rslt_wnd_spd,IEEE4)
	Sample (1,std_wnd_dir,IEEE4)

	Sample (1,Fc_irga,IEEE4)
	Sample (1,LE_irga,IEEE4)
	Sample (1,LE_kh,IEEE4)
	Sample (1,co2_wpl_LE,IEEE4)
	Sample (1,co2_wpl_H,IEEE4)
	Sample (1,h2o_wpl_LE,IEEE4)
	Sample (1,h2o_wpl_H,IEEE4)
	Sample (1,h2o_wpl_LE_kh,IEEE4)
	Sample (1,h2o_wpl_H_kh,IEEE4)
	Sample (1,oc_LE,IEEE4)
	Sample (1,oc_var,IEEE4)
	
	Totalize (1,n,IEEE4,cov_disable_flag)

	Totalize (1,n,IEEE4,NOT (disable_flag_on(1) OR disable_flag_on(3)))
	FieldNames ("csat_warnings")

	Totalize (1,n,IEEE4,NOT (disable_flag_on(2) OR disable_flag_on(4)))
	FieldNames ("irga_warnings")

	Totalize (1,n,IEEE4,NOT (del_T_f) OR NOT (disable_flag_on(3)))
	FieldNames ("del_T_f_Tot")
	Totalize (1,n,IEEE4,NOT (sig_lck_f) OR NOT (disable_flag_on(3)))
	FieldNames ("sig_lck_f_Tot")
	Totalize (1,n,IEEE4,NOT (amp_h_f) OR NOT (disable_flag_on(3)))
	FieldNames ("amp_h_f_Tot")
	Totalize (1,n,IEEE4,NOT (amp_l_f) OR NOT (disable_flag_on(3)))
	FieldNames ("amp_l_f_Tot")
	Totalize (1,n,IEEE4,NOT (chopper_f) OR NOT (disable_flag_on(4)))
	FieldNames ("chopper_f_Tot")
	Totalize (1,n,IEEE4,NOT (detector_f) OR NOT (disable_flag_on(4)))
	FieldNames ("detector_f_Tot")
	Totalize (1,n,IEEE4,NOT (pll_f) OR NOT (disable_flag_on(4)))
	FieldNames ("pll_f_Tot")
	Totalize (1,n,IEEE4,NOT (sync_f) OR NOT (disable_flag_on(4)))
	FieldNames ("sync_f_Tot")
	Average (1,agc,IEEE4,disable_flag_on(2))

	Average (1,panel_temp,IEEE4,FALSE)
	Average (1,batt_CR3000,IEEE4,FALSE)
	Minimum (1,batt_CR3000,IEEE4,False,False)
	Minimum (1,batt_CSAT,IEEE4,False,False)
	Minimum (1,batt_LICOR,IEEE4,False,False)
	WindVector (1,RMY_WS,RMY_WD,IEEE4,False,0,0,0)
	FieldNames  ("RMY_windspd,RMY_winddir,RMY_dir_StDev")
	Average (1,SBT_C,IEEE4,False)
	Average (1,TT_C,IEEE4,False)
	Average (1,t_hmp2,IEEE4,False)
	Average (1,e_hmp2,IEEE4,False)
	Average (1,Rs,IEEE4,False)
	Average (1,Rl,IEEE4,False)
	Totalize (1,TB,IEEE4,False)
	
	
	
EndTable


'Time series data.
'DataTable (ts_data,save_ts_flag_on,-1)
	'DataInterval (0,SCAN_INTERVAL,mSec,100)
	'CardOut (0,-1)

	'Sample (1,Ux,IEEE4)
	'Sample (1,Uy,IEEE4)
	'Sample (1,Uz,IEEE4)
	'Sample (1,Ts,IEEE4)
	'Sample (1,co2,IEEE4)
	'Sample (1,h2o,IEEE4)
	'Sample (1,kh,IEEE4)
	'Sample (1,press,IEEE4)
	'Sample (1,diag_csat,IEEE4)
	'Sample (1,t_hmp,IEEE4)
	'Sample (1,e_hmp,IEEE4)
'EndTable


'*** Working Data Tables ***

'Reorder the data and prepare to lag all the data.
DataTable (dly_data,TRUE,OFFSET)
	Sample (1,panel_temp_raw,IEEE4)
	Sample (1,Ux_raw,IEEE4)
	Sample (1,Uy_raw,IEEE4)
	Sample (1,Uz_raw,IEEE4)
	Sample (1,Ts_raw,IEEE4)
	Sample (1,diag_csat_raw,IEEE4)
	Sample (1,co2_raw,IEEE4)
	Sample (1,h2o_raw,IEEE4)
	Sample (1,press_raw,IEEE4)
	Sample (1,diag_irga_raw,IEEE4)
	Sample (1,kh_raw,IEEE4)
EndTable


'Compute the flux covariances and the other cross products required to rotate the data
'into natural wind coordinates. This data is output every OUTPUT_INTERVAL minutes.
DataTable (comp_cov,TRUE,1)
	DataInterval (0,OUTPUT_INTERVAL,Min,1)

	'Compute covariances from CSAT3 data.
	Covariance (4,cov_array(1,1),IEEE4,disable_flag_on(1),10)
	'Compute covariance of CO2 against CSAT3 wind data.
	Covariance (4,cov_array(2,1),IEEE4,cov_disable_flag,4)
	'Compute covariance of H2O against CSAT3 wind data.
	Covariance (4,cov_array(3,1),IEEE4,cov_disable_flag,4)
	'Compute covariance of KH20 against CSAT3 wind data.
	Covariance (5,cov_array(4,1),IEEE4,disable_flag_on(1),5)
	WindVector (1,wind_east,wind_north,IEEE4,disable_flag_on(1),0,1,2)
	WindVector (1,Uy,Ux,IEEE4,disable_flag_on(1),0,1,2)
	Average (1,t_hmp,IEEE4,FALSE)
	Average (1,e_hmp,IEEE4,FALSE)
	Average (1,co2,IEEE4,disable_flag_on(2))
	Average (1,press,IEEE4,disable_flag_on(2))
	Average (1,Ts,IEEE4,disable_flag_on(1))
EndTable



'*** Program ***

BeginProg
	n = 1
	'Configure Control port 1 for output 
	
	PortsConfig (&B1,&B1)

	'Set all CSAT3 variables to NaN.
	Move (Ux_raw,5,NaN,1)

	'Set all LI-7500 variables to NaN.
	Move (co2_raw,4,NaN,1)

	'Set the SDM clock speed.
	SDMSpeed (SDM_PER)


	Scan (SCAN_INTERVAL,mSec,SCAN_BUFFER_SIZE,0)
	
	'Turn radio on or off according to time for downloading data
	
	If IfTime (10,720,Min) Then WriteIO (&B1,radio_on)
	If IfTime (25,720,Min) Then WriteIO (&B1,radio_off)
	
		'Datalogger panel temperature.
		PanelTemp (panel_temp_raw,250)

		'Measure logger battery voltage
		Battery (batt_CR3000)
		
		'Measure external battery voltages
		VoltSe (batt_CSAT,1,mV5000,17,1,0,250,0.0066,0)
		VoltSe (batt_LICOR,1,mV5000,19,1,0,250,10,0)
		
		'Measure KH20.
		VoltDiff (kh_raw,1,mV5000,11,TRUE,200,250,1,0)
		
		'Get CSAT3 wind and sonic temperature data.
		CSAT3 (Ux_raw,1,3,91,CSAT_OPT)

		'Get LI-7500 data.
		CS7500 (co2_raw,1,7,6)

		'Measure SP -LITE solar shortwave radiation
		VoltDiff (Rs,1,mV200C,4,True ,0,250,SPLITE_cal,0)
			
		' Measure CGR4 radiation signal in W/m2.
		VoltDiff (Rtp,1,mV20C,3,True ,0,250,1,0)
		Rtp = Rtp * 1000 / CGR4_cal
		
		' Measure CGR4 temperature signal and convert it to deg C.
		BrHalf (Rsensor,1,mV5000C,18,Vx3,1,2500,True ,0,250,1,0)		
		' Convert the value output from the BrHalf instruction into resistance of the 
		' thermistor in ohms
		RSensor = ((1-Rsensor)*1000)/Rsensor
		' Convert the resistance of the thermistor into degrees Celcius using the 
		' Steinhart-Hart equation.
		CGR4Temp = (1/(CGR4_A+(CGR4_B*(LN (Rsensor)))+(CGR4_C* ((LN (Rsensor))^3))))-273.15
		
		'Calculate Downward Longwave Radiation
		Rl = Rtp + (CGR4_T * ((CGR4Temp+273.15)^4))
		
		'Measure tipping bucket
		PulseCount (TB,1,2,2,0,.1,0)
		
		'Measure the HMP45C temperature and fraction humidity.
		VoltDiff (t_hmp,2,mV1000,5,TRUE,200,250,0.1,0)
		VoltDiff (t_hmp2,2,mV1000,7,TRUE,200,250,0.1,0)

		'Find the engineering units for the HMP45C temperature and humidity.
		t_hmp = t_hmp-40
		t_hmp2 = t_hmp2-40
		
		'Find the HMP45C vapor pressure (kPa).
		VaporPressure (e_hmp,t_hmp,rh_hmp)
		VaporPressure (e_hmp2,t_hmp2,rh_hmp2)
		
		'Measure the 05106 RMY Wind Monitor wind speed
		' The result from PulseCount is a moving average frequency (Hz), computed over
		' 5000 mSec.  The average is updated every Scan (100 mSec).
		PulseCount (RMY_WS,1,1,1,5000,0.098,0)

		'Measure the 05106 RMY Wind Monitor wind direction.
		BrHalf (RMY_WD,1,mV5000,1,Vx1,1,5000,TRUE,200,250,355,0)

		'Measure the IRR-P temperature Sensor
		'Measure mV output of the thermopile
		VoltDiff (mV_IRR,1,mV20,2,True ,0,250,1.0,0)
		'Instruction To measure sensor body temperature
		Therm109 (SBT_C,1,2,Vx2,0,250,1.0,0)
		'Calculation of m (Slope) and b (Intercept) coefficients for target temperature calculation
		m=(mC2*(SBT_C^2))+(mC1*SBT_C)+mC0
		b=(bC2*(SBT_C^2))+(bC1*SBT_C)+bC0
		'Target temperature calculation based on m and b coefficients
		SBT_K=SBT_C+273.15
		TT_C=(((SBT_K^4)+(m*mV_IRR)+b)^0.25)-273.15

		'Lag the CSAT3 and LI-7500 measurements.
		CallTable dly_data

		If ( scan_count >= OFFSET ) Then
			'Load in the analog data that has been lagged by OFFSET scans.
			GetRecord (dly_data_out(1),dly_data,OFFSET)
			Move (kh,1,dly_data_out(11),1)		'kh
			Move (panel_temp,1,dly_data_out(1),1)	'panel_temp
			ln_kh = LOG (kh)

			'Load in CSAT3 data that has been lagged by CSAT_REC_BCK scans.
			GetRecord (dly_data_out(1),dly_data,CSAT_REC_BCK)
			Move (Ux,5,dly_data_out(2),5)			'Ux, Uy, Uz, Ts, diag_csat

			'Load in the LI-7500 data that has been lagged by IRGA_REC_BCK scans.
			GetRecord (dly_data_out(1),dly_data,IRGA_REC_BCK)
			Move (co2,4,dly_data_out(7),4)		'co2, h2o, press, diag_irga


			'Copy and convert CSAT3 for compass wind vector computation.
			wind_east = -1*Uy
			wind_north = Ux

			'Save the molar density to compute molar concentration.
			co2_mm_m3 = co2
			h2o_mm_m3 = h2o

			'Compute the molar concentration of CO2 and H2O.
			co2_um_m = co2_mm_m3*R*(t_hmp+273.15)/press*1000
			h2o_mm_m = h2o_mm_m3*R*(t_hmp+273.15)/press

			'Convert LI-7500 data from molar density [mmol/m^3] to mass density.
			' 44 [g/mol] - molecular weight of carbon dioxide
			' 0.018 [g/mmol] - molecular weight of water vapor
			If ( NOT (co2 = -99999) ) Then ( co2 = co2*44 )
			h2o = h2o*0.018


			'Define 61502 as NaN.
			If ( diag_csat = NaN ) Then ( diag_csat = 61502 )

			'Break up the four CSAT3 warning flags into four separate bits.
			diag_csat_work = diag_csat
			del_T_f = diag_csat_work AND &h8000
			sig_lck_f = diag_csat_work AND &h4000
			amp_h_f = diag_csat_work AND &h2000
			amp_l_f = diag_csat_work AND &h1000

			'Turn on the intermediate processing disable flag when any CSAT3 warning flag is
			' high, including the special cases NaN (61502), a Lost Trigger (61440), No Data
			' (61503), an SDM error (61441), or wrong CSAT3 embedded code (61442).
			disable_flag_on(1) = diag_csat_work AND &hf000

			'Turn on only when CSAT3 diagnostic warning flags are set.
			disable_flag_on(3) = ( disable_flag_on(1) AND NOT (Ts = NaN) )

			'Save the four most significant bits of the CSAT3 diagnostics, except for the
			' special cases NaN (61502), a Lost Trigger (61440), No Data (61503), an SDM
			' error (61441), or wrong CSAT3 embedded code (61442).
			If ( diag_csat_work < &hf000 ) Then ( diag_csat = INT (diag_csat_work/&h1000) )


			'Swap the LI-7500 diagnostic bit state.
			diag_irga = diag_irga XOR &h00f0
			diag_irga_work = diag_irga

			'Turn on the intermediate processing disable flag when the LI-7500 has failed to
			' send data to the datalogger via SDM. Set all flags high and rail the AGC to 94.
			If ( (co2 < -99990) OR (co2 = NaN) ) Then (diag_irga_work = &h00ff)

			'Compute the AGC.
			agc = INT ((diag_irga_work AND &h000f)*6.25+0.5)

			'Break up the four LI-7500 warning flags into four separate bits.
			chopper_f = diag_irga_work AND &h0080
			detector_f = diag_irga_work AND &h0040
			pll_f = diag_irga_work AND &h0020
			sync_f = diag_irga_work AND &h0010

			'Turn on the intermediate processing disable flag when any LI-7500 warning flag
			' is high, including the special cases NaN or an SDM error.
			disable_flag_on(2) = diag_irga_work AND &h00f0

			'Turn on only when LI-7500 diagnostic warning flags are set.
			disable_flag_on(4) = ( disable_flag_on(2) AND NOT (diag_irga_work >= &h00ff) )

			'Save only the four most significant bits of the LI-7500 diagnostic word.
			diag_irga = INT (diag_irga_work/&h0010)


			'Filter data in the covariance instruction if the CSAT3 or LI-7500 reports bad data.
			cov_disable_flag = disable_flag_on(1) OR disable_flag_on(2)


			'Start saving the time series data on an even minute boundary.
			If ( (NOT (save_ts_flag_on)) AND (IfTime (0,1,Min)) ) Then ( save_ts_flag_on = TRUE )


			'Save adjusted time series data.
			'CallTable ts_data

			'Load the arrays that hold the input data for the covariance instructions.
			cov_array(1,1) = Ts
			Move (cov_array(1,2),3,Ux,3)
			cov_array(2,1) = co2
			Move (cov_array(2,2),3,Ux,3)
			cov_array(3,1) = h2o
			Move (cov_array(3,2),3,Ux,3)
			cov_array(4,1) = ln_kh
			Move (cov_array(4,2),3,Ux,3)
			cov_array(4,5) = Ts
			
			'Compute the online covariances.
			CallTable comp_cov


			If ( comp_cov.Output(1,1) ) Then
				GetRecord (cov_out(1),comp_cov,1)

				'Compass wind direction will be between 0 and 360 degrees.
				wnd_dir_compass = (wnd_dir_compass+CSAT3_AZIMUTH) MOD 360

				'CSAT3 wind direction will be between 0 to 180 degrees and 0 to -180 degrees.
				If ( wnd_dir_csat3 ) > 180 Then ( wnd_dir_csat3 = wnd_dir_csat3-360 )

				h2o_hmp_mean = e_hmp_mean/((t_hmp_mean+273.15)*RV)
				rho_d_mean = (press_mean-e_hmp_mean)/((t_hmp_mean+273.15)*RD)
				rho_a_mean = (rho_d_mean+h2o_hmp_mean)/1000


				'Compute online fluxes.
				Fc_irga = cov_co2_Uz
				LE_irga = LV*cov_h2o_Uz
				LE_kh = LV*cov_h2o_kh_Uz/XKW
				Hs = rho_a_mean*CP*cov_Ts_Uz

				tau = SQR ((cov_Ux_Uz*cov_Ux_Uz)+(cov_Uy_Uz*cov_Uy_Uz))
				u_star = SQR (tau)
				tau = rho_a_mean*tau

				'Scale the KH20 cross products.
				cov_h2o_kh_Ux = cov_h2o_kh_Ux/XKW
				cov_h2o_kh_Uy = cov_h2o_kh_Uy/XKW
				cov_h2o_kh_Uz = cov_h2o_kh_Uz/XKW
				cov_h2o_kh_Ts = cov_h2o_kh_Ts/XKW
				stdev_h2o_kh = stdev_h2o_kh/(XKW*XKW)

				'Compute the KH20 oxygen corrrection for latent heat flux and water vapor density variance.
				oc_LE = LV*KO*CO*MO*press_mean/(KW*R*(t_hmp_mean+273.15)*(t_hmp_mean+273.15))*cov_Ts_Uz
				oc_var = -2*KO*CO*MO*press_mean/(X*KW*KW*R*(t_hmp_mean+273.15)*(t_hmp_mean+273.15))*cov_h2o_kh_Ts


				'Compute the standard deviation from the variance.
				stdev_Ts = SQR (stdev_Ts)
				stdev_Ux = SQR (stdev_Ux)
				stdev_Uy = SQR (stdev_Uy)
				stdev_Uz = SQR (stdev_Uz)
				stdev_co2 = SQR (stdev_co2)
				stdev_h2o = SQR (stdev_h2o)

				sigma_wpl = h2o_hmp_mean/rho_d_mean

				'LI-7500 Webb et al. term for water vapor Eq. (25).
				h2o_wpl_LE = MU_WPL*sigma_wpl*LE_irga
				h2o_wpl_H = (1+(MU_WPL*sigma_wpl))*h2o_hmp_mean/(t_hmp_mean+273.15)*LV*cov_Ts_Uz
				LE_wpl = LE_irga+h2o_wpl_LE+h2o_wpl_H

				'KH20 Webb et al. term for water vapor Eq. (25).
				h2o_wpl_LE_kh = MU_WPL*sigma_wpl*(LE_kh-oc_LE)
				h2o_wpl_H_kh = (1+(MU_WPL*sigma_wpl))*h2o_hmp_mean/(t_hmp_mean+273.15)*LV*cov_Ts_Uz
				LE_wpl_kh = LE_kh-oc_LE+h2o_wpl_LE_kh+h2o_wpl_H_kh

				'Compute a sensible heat flux from Hs and LE_wpl.
				Hc = (Hs-(rho_a_mean*CP*0.51*RD*(t_hmp_mean+273.15)*(t_hmp_mean+273.15)*LE_wpl)/(press_mean*LV))*((t_hmp_mean+273.15)/(Ts_mean+273.15))

				'LI-7500 Webb et al. term for carbon dioxide Eq. (24).
				co2_wpl_LE = MU_WPL*co2_mean/rho_d_mean*cov_h2o_Uz
				co2_wpl_H  = (1+(MU_WPL*sigma_wpl))*co2_mean/(t_hmp_mean+273.15)*Hc/(rho_a_mean*CP)
				Fc_wpl = Fc_irga+co2_wpl_LE+co2_wpl_H
			EndIf

			CallTable flux
		Else
			scan_count = scan_count+1
		EndIf
	NextScan
EndProg
